name: Pull Request Merge Workflow

on:
  pull_request:
    types:
      - closed

jobs:
  detectMerge:
    
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref != 'update-cargo-toml'
    runs-on: ubuntu-latest
    outputs:
      run_rest_jobs: ${{ steps.set_output.outputs.che }}
    
    steps:
      - name: Check if pull request was merged
#         if: ${{  github.event.pull_request.head.ref == 'update-cargo-toml' }}
        run: |
          echo "bye"
          exit 0
          
      - name: do it 
        id: set_output
        run: |
          echo "Pull request was merged."
          echo "Source branch: ${{ github.event.pull_request.head.ref }}"
          echo "Target branch: ${{ github.event.pull_request.base.ref }}"
          echo "::set-output name=che::true"
    
#   build:
#     needs: [detectMerge]
#     if: needs.job01.outputs.run_rest_jobs == 'true'
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Run Build Script
#         run: |
#            git config user.name "GitHub Actions Bot"
#            git config user.email "<>"
           
#       - name: run script
#         run: |
#            python update.py
#       - name: commit updated Cargo.toml
#         run: |
#            git add devprofiler/Cargo.toml
#            git commit -m "Updated code"
#            git push origin main
#       - name: Build Rust CLI
#         run: |
#           cd devprofiler
#           cargo build --release
          
#       - name: Get version from Cargo.toml
#         id: get_version
#         run: |
#           cd devprofiler
#           echo "::set-output name=version::$(grep -Po '(?<=version = ")[\d.]+(?=")' Cargo.toml)"
          
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.get_version.outputs.version }}
#           release_name: Release ${{ steps.get_version.outputs.version }}
#           draft: false
#           prerelease: false
          
#       - name: cargo deb
#         run: |
#           cargo install  cargo-deb
          
#       - name: build binary
#         run: |
#           cd devprofiler
#           cargo deb
          
#       - name: Rename Debian Package
#         run: mv ./devprofiler/target/debian/*.deb ./devprofiler/target/debian/devprofiler.deb
        
#       - name: Upload .deb Package
#         id: upload_deb
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./devprofiler/target/debian/devprofiler.deb
#           asset_name: devprofiler.deb
#           asset_content_type: application/octet-stream
 
        
